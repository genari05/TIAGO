"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfiguredAuthProviderId = exports.setConfiguredAzureEnv = exports.getConfiguredAzureEnv = void 0;
const azureEnv = require("@azure/ms-rest-azure-env"); // This package is so small that it's not worth lazy loading
const vscode = require("vscode");
// These strings come from https://github.com/microsoft/vscode/blob/eac16e9b63a11885b538db3e0b533a02a2fb8143/extensions/microsoft-authentication/package.json#L40-L99
const CustomCloudConfigurationSection = 'microsoft-sovereign-cloud';
const CloudEnvironmentSettingName = 'environment';
const CustomEnvironmentSettingName = 'customEnvironment';
var CloudEnvironmentSettingValue;
(function (CloudEnvironmentSettingValue) {
    CloudEnvironmentSettingValue["ChinaCloud"] = "ChinaCloud";
    CloudEnvironmentSettingValue["USGovernment"] = "USGovernment";
    CloudEnvironmentSettingValue["Custom"] = "custom";
})(CloudEnvironmentSettingValue || (CloudEnvironmentSettingValue = {}));
/**
 * Gets the configured Azure environment.
 *
 * @returns The configured Azure environment from the settings in the built-in authentication provider extension
 */
function getConfiguredAzureEnv() {
    const authProviderConfig = vscode.workspace.getConfiguration(CustomCloudConfigurationSection);
    const environmentSettingValue = authProviderConfig.get(CloudEnvironmentSettingName);
    if (environmentSettingValue === CloudEnvironmentSettingValue.ChinaCloud) {
        return Object.assign(Object.assign({}, azureEnv.Environment.ChinaCloud), { isCustomCloud: false });
    }
    else if (environmentSettingValue === CloudEnvironmentSettingValue.USGovernment) {
        return Object.assign(Object.assign({}, azureEnv.Environment.USGovernment), { isCustomCloud: false });
    }
    else if (environmentSettingValue === CloudEnvironmentSettingValue.Custom) {
        const customCloud = authProviderConfig.get(CustomEnvironmentSettingName);
        if (customCloud) {
            return Object.assign(Object.assign({}, new azureEnv.Environment(customCloud)), { isCustomCloud: true });
        }
        throw new Error(vscode.l10n.t('The custom cloud choice is not configured. Please configure the setting `{0}.{1}`.', CustomCloudConfigurationSection, CustomEnvironmentSettingName));
    }
    return Object.assign(Object.assign({}, azureEnv.Environment.get(azureEnv.Environment.AzureCloud.name)), { isCustomCloud: false });
}
exports.getConfiguredAzureEnv = getConfiguredAzureEnv;
/**
 * Sets the configured Azure cloud.
 *
 * @param cloud Use `'AzureCloud'` or `undefined` for public Azure cloud, `'ChinaCloud'` for Azure China, or `'USGovernment'` for Azure US Government.
 * These are the same values as the cloud names in `@azure/ms-rest-azure-env`. For a custom cloud, use an instance of the `@azure/ms-rest-azure-env` {@link azureEnv.EnvironmentParameters}.
 *
 * @param target (Optional) The configuration target to use, by default {@link vscode.ConfigurationTarget.Global}.
 */
function setConfiguredAzureEnv(cloud, target = vscode.ConfigurationTarget.Global) {
    return __awaiter(this, void 0, void 0, function* () {
        const authProviderConfig = vscode.workspace.getConfiguration(CustomCloudConfigurationSection);
        if (typeof cloud === 'undefined' || !cloud) {
            // Use public cloud implicitly--set `environment` setting to `undefined`
            yield authProviderConfig.update(CloudEnvironmentSettingName, undefined, target);
        }
        else if (typeof cloud === 'string' && cloud === 'AzureCloud') {
            // Use public cloud explicitly--set `environment` setting to `undefined`
            yield authProviderConfig.update(CloudEnvironmentSettingName, undefined, target);
        }
        else if (typeof cloud === 'string') {
            // Use a sovereign cloud--set the `environment` setting to the specified value
            yield authProviderConfig.update(CloudEnvironmentSettingName, cloud, target);
        }
        else if (typeof cloud === 'object') {
            // use a custom cloud--set the `environment` setting to `custom` and the `customEnvironment` setting to the specified value
            yield authProviderConfig.update(CloudEnvironmentSettingName, CloudEnvironmentSettingValue.Custom, target);
            yield authProviderConfig.update(CustomEnvironmentSettingName, cloud, target);
        }
        else {
            throw new Error(`Invalid cloud value: ${JSON.stringify(cloud)}`);
        }
    });
}
exports.setConfiguredAzureEnv = setConfiguredAzureEnv;
/**
 * Gets the ID of the authentication provider configured to be used
 * @returns The provider ID to use, either `'microsoft'` or `'microsoft-sovereign-cloud'`
 */
function getConfiguredAuthProviderId() {
    return getConfiguredAzureEnv().name === azureEnv.Environment.AzureCloud.name ? 'microsoft' : 'microsoft-sovereign-cloud';
}
exports.getConfiguredAuthProviderId = getConfiguredAuthProviderId;
//# sourceMappingURL=configuredAzureEnv.js.map