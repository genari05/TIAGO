"use strict";
/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimedAction = void 0;
/**
 * A helper class to send an Action event with a duration, timer starts on construction and ends when send() is called.
 */
class TimedAction {
    /**
     * Creates a new TimedAction and sets the start time to Date.now().
     * @param view The view this action originates from
     * @param action The name of the action
     * @param target The name of the item being acted on
     * @param source The source of the action
     */
    constructor(reporter, view, action, target = '', source = '') {
        this.reporter = reporter;
        this.view = view;
        this.action = action;
        this.target = target;
        this.source = source;
        /**
         * Additional properties to send along with the final message once send is called.
         */
        this.properties = {};
        /**
         * Additional measures to send along with the final message once send is called.
         */
        this.measures = {};
        this.start = Date.now();
    }
    /**
     * Adds additional custom properties to this event.
     * @param additionalProperties The additional properties to add
     */
    withAdditionalProperties(additionalProperties) {
        Object.assign(this.properties, additionalProperties);
        return this;
    }
    /**
     * Adds additional custom measurements to this event.
     * @param additionalMeasurements The additional measurements to add
     */
    withAdditionalMeasures(additionalMeasurements) {
        Object.assign(this.measures, additionalMeasurements);
        return this;
    }
    /**
     * Sends the event with the duration being the difference between when this TimedAction was created and now.
     */
    send() {
        this.reporter.createActionEvent(this.view, this.action, this.source, this.target, Date.now() - this.start)
            .withAdditionalProperties(this.properties)
            .withAdditionalMeasurements(this.measures)
            .send();
    }
}
exports.TimedAction = TimedAction;
//# sourceMappingURL=timedAction.js.map