"use strict";exports.id=2377,exports.ids=[2377],exports.modules={56342:(e,t,n)=>{n.a(e,async(e,a)=>{try{n.r(t),n.d(t,{sendEvent:()=>h,sendEventNewChat:()=>f});var o=n(24330);n(60166);var r=n(92810),i=n(74506),s=n(77807),c=n(82687),l=n(61740),d=n(94750),u=n(29712),p=n(40618),g=e([r,i,c,d]);[r,i,c,d]=g.then?(await g)():g;let h=async({eventName:e,groupBy:t,provider:n,model:a,promptTokens:o,completionTokens:i,totalTokens:s,target:u,value:p,statusCode:g,object:h,message:f,code_language:y,functionName:w,codeLinesNumber:b})=>{let v=async()=>{let v=!c.PR.get()?.access_token,k=c.PR.get()?.signed_distinct_id,x=c.PR.get()?.distinct_id,S=await (0,r.getKeyValue)("anonymousDistinctId");if(console.log({userId:x,anonymousDistinctId:S}),!x&&!S)throw console.log({userId:x,anonymousDistinctId:S}),Error("No userId or anonymousDistinctId found");let[A,N,q]=await Promise.all([d.Z.getIdeLanguage(),d.Z.getVersion(),a?d.Z.getLanguage():""]),T={userType:v?"anonymous":"registered",...n?{provider:n}:{},...a?{model:a}:{},...o?{prompt_tokens:o}:{},...i?{completion_tokens:i}:{},...s?{total_tokens:s}:{},...u?{target:u}:{},...t?{groupBy:t}:{},...p?{value:p}:{},...h?{object:h}:{},...f?{message:f}:{},...q?{language_code:q}:{},...y?{code_language:y}:{},...w?{function_name:w}:{},...b?{codeLinesNumber:b}:{},language:A,source:l.L_,codeGPTVersion:N};m({event:e||"Chat",data:{...T,...g?{statusCode:g}:{}},userId:x||S||"",signedDistinctId:k||""})};if("userCreated"===e){let e=Math.floor(4501*Math.random())+500;await new Promise(t=>setTimeout(t,e)),await v()}else setTimeout(v,5e3);return null};async function m({event:e,data:t,userId:n,signedDistinctId:a}){let o=[{event:e,properties:{...t,time:Date.now(),distinct_id:n,$insert_id:crypto.randomUUID()}}],r=await (0,i.Z)();return u.Z.post(`${s.xf}/telemetry`,o,{headers:{"Content-Type":"application/json",...r?{Authorization:`Bearer ${r}`}:{},...a?{"X-Signed-Distinct-Id":a}:{}}}).catch(e=>{console.error("Error sending telemetry",e)}),null}let f=async({agentId:e})=>{let t=await (0,i.Z)();return fetch(`${s.xf}/logs/new-chat-metrics`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({agentId:e,source:l.L_.toUpperCase()})}),null};(0,p.h)([h,f]),(0,o.j)("395448ad66a04a8ccb5507391feafc0ccded9c25",h),(0,o.j)("42b7a0b34b7c38c34b9d081dace60a2396fdfcc8",f),a()}catch(e){a(e)}})},52844:(e,t,n)=>{n.a(e,async(e,a)=>{try{n.d(t,{g:()=>u,wk:()=>p});var o=n(92810),r=n(74506),i=n(51371),s=n(34659),c=n(68721),l=e([o,r,i]);[o,r,i]=l.then?(await l)():l;let d=[{type:"function",function:{name:"codeInterpreter",description:`Executes the given code and returns the result.
        *Use print() to return the result to the user.*`,parameters:{type:"object",properties:{code:{type:"string",description:"The Python code to execute in the notebook."}},required:["code"]}}},{type:"function",function:{name:"fetchUrl",description:"Fetches the given URL and returns the response.",parameters:{type:"object",properties:{url:{type:"string",description:"The URL to fetch."}},required:["url"]}}},{type:"function",function:{name:"searchEngine",description:"Searches the given query on the DuckDuckGo search engine and returns the results.",parameters:{type:"object",properties:{query:{type:"string",description:"The query to search."}},required:["query"]}}},{type:"function",function:{name:"searchStackOverflow",description:"Search in StackOverflow in english to find the infomation you need to answer the user's question.",parameters:{type:"object",properties:{query:{type:"string",description:"The query to search."}},required:["query"]}}},{type:"function",function:{name:"queryGithubIssues",description:"Searches the given query on the Github issues and returns the results.",parameters:{type:"object",properties:{query:{type:"string",description:"The query to search."},owner:{type:"string",description:"The owner of the repository."},repo:{type:"string",description:"The repository name."}},required:["query","owner","repo"]}}},{type:"function",function:{name:"fetchIssuesComments",description:`Fetches the given URL and returns the issue thread.
        Use this function to get the comments of an issue and give to user a complete response.`,parameters:{type:"object",properties:{owner:{type:"string",description:"The owner of the repository."},repo:{type:"string",description:"The repository name."},number:{type:"string",description:"The issue number."}},required:["owner","repo","number"]}}},{type:"function",function:{name:"getWorkspaceTree",description:"Use this functions before generateFilesAndFolders to get the user's workspace tree and generate the files and folders list with the correct path."}},{type:"function",function:{name:"generateFilesAndFolders",description:"Generates a list of files and folders based on the user's request. It returns the full path of the files\n Only use this function if the user has already asked for creeating files or the workspace tree.",parameters:{type:"object",properties:{filePaths:{type:"array",items:{type:"string",description:"The path of the file from the root of the project."}}},required:["filePaths"]}}},{type:"function",function:{name:"getPlanningAgents",description:"Get available agents to help you with your planning."}},{type:"function",function:{name:"executePlanningSteps",description:"Execute the planning steps and return the result.",parameters:{type:"object",properties:{planningSteps:{type:"array",items:{type:"object",properties:{step:{type:"string",description:"The step to execute."},agentName:{type:"string",description:"The agent name that will execute the step."},agentId:{type:"string",description:"The agent id that will execute the step."}},required:["step","agentName","agentId"]}},instructions:{type:"string",description:"Provide a detailed plan for each step to be executed."}},required:["planningSteps","instructions"]}}}].map(e=>e.function),u=e=>d.filter(t=>e.includes(t.name)),p={code_semantic_search:async({functionCall:e,sendChunk:t})=>{let{query:n,path:a}=JSON.parse(e.arguments),r=await (0,i.Sk)({query:n,path:a}),s=await Promise.all(r.map(async e=>{let t=await (0,o.getFileContent)(e.origin_file,e.start_line,e.end_line);return{...e,content:t}})),c=(await (0,i.Nt)({query:n,chunks:s.map(e=>JSON.stringify(e.content))})).map(e=>e.index),l=s.filter((e,t)=>c.includes(t));return t({content:"",display:"ChunksCard",props:{graph:"",chunks:l}}),JSON.stringify(l,null,2)},get_file_content:async({functionCall:e,sendChunk:t})=>{let{path:n}=JSON.parse(e.arguments);t({content:"",display:"ChunksCard",props:{chunks:[{origin_file:n,start_line:null,end_line:null,similarity:1}]}});let a=await (0,o.getFileContent)(n);return JSON.stringify(a,null,2)},get_folder_tree_structure:async({functionCall:e,sendChunk:t})=>{let{path:n}=JSON.parse(e.arguments),a=await (0,o.getAllPathsFromProject)();return t({content:"",display:"FileTreeWrap",props:{paths:"/"!==n?a.filter(e=>e.startsWith(n)):a,bodyOnly:!0}}),(0,s.j)(a,15,n,20,!1)},codeInterpreter:async({functionCall:e,sendChunk:t})=>{let{code:n}=JSON.parse(e.arguments),a=crypto.randomUUID();t({content:"```python\n"+n+"\n```",display:"CodeBlock",props:{language:"python",value:n,isRunning:!0},id:a});let o=await (0,r.Z)(),i=await fetch("https://api-deno-dev.codegpt.co/api/v1/code-interpreter",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({code:n})}),s=await i.json();t({content:"",id:a}),console.log({json:s});let c=s?.results?.[0]?.png||s?.results?.[0]?.svg||s?.results?.[0]?.jpeg;if(c)return t({content:"```python\n"+n+"\n```",display:"CodeBlock",props:{language:"python",value:n},id:a}),t({content:`The image with the users code was generated by the code execution of the following code:

${n}

 [![image](data:image/png;base64,...)]`,display:"img",props:{src:`data:image/png;base64,${c}`,alt:"image"}}),!1;let l={result:{...s.text?{text:s.text}:{},...s.error?{error:s.error}:{},...s.logs?{logs:s.logs}:{}}},d=s.text?s.text:s.error?s.error:s.logs?s.logs.stdout.join("\n"):"";return t({content:"```python\n"+n+"\n```",display:"CodeBlock",props:{language:"python",value:n},id:a}),d&&t({content:JSON.stringify(l,null,2),display:"CodeBlock",props:{language:"Result",value:d}}),`the code executed successfully, the result is: ${d}
    don't show the code to the user, just finalize the response.`},queryGithubIssues:async({functionCall:e})=>{let{query:t,owner:n,repo:a}=JSON.parse(e.arguments),o=await fetch(`https://api.github.com/search/issues?q=is:issue+repo:${n}/${a}+${t}&per_page=10`),r=(await o.json()).items.map(e=>({title:e.title,url:e.html_url,created_at:e.created_at,updated_at:e.updated_at,user:e.user.login,comments:e.comments,comments_url:e.comments_url,labels:e.labels.map(e=>({name:e.name,description:e.description})),body:e.body}));return console.log(r),JSON.stringify(r)+"\nNow use the `fetchIssuesComments` function to get the comments of an issue and give to user a complete response."},fetchIssuesComments:async({functionCall:e})=>{let{owner:t,repo:n,number:a}=JSON.parse(e.arguments),o=await fetch(`https://api.github.com/repos/${t}/${n}/issues/${a}/comments`),r=(await o.json()).map(e=>({body:e.body,created_at:e.created_at,updated_at:e.updated_at,user:e.user.login}));return console.log({comments:r}),JSON.stringify(r)},searchStackOverflow:async({functionCall:e,sendChunk:t})=>{let{query:n}=JSON.parse(e.arguments),a=(await (0,c.K)(n)).slice(0,3);if(0===a.length)return"No results found.";t({content:JSON.stringify(a,null,2),display:"StackOverflowCards",props:{cards:a.map(e=>({service:e.label,url:e.link}))}}),console.log(JSON.stringify(a,null,2));let o=await Promise.all(a.map(e=>(0,c.I)(e.link)));return JSON.stringify(o)},getWorkspaceTree:async({functionCall:e})=>{let t=await (0,o.getAllPathsFromProject)();return`${JSON.stringify(t)}
    
    *Remember to ALWAYS create a list of files and folders with the correct structure/path starting from the ROOT of the project.*
    *Remember to mantain the same nomenclature as the user for the files and folders names.*
    
    Example: 
    filePaths: [
    "src/app.py",
    "src/services/github.py",
    "src/services/database.py",
    ]
    `},generateFilesAndFolders:async({functionCall:e,sendChunk:t})=>{let{filePaths:n}=JSON.parse(e.arguments);return n=n.map(e=>e.startsWith("./")?e.slice(2):e),t({content:JSON.stringify(n,null,2),display:"FileTreeWrap",props:{paths:n}}),`${JSON.stringify(n,null,2)}
    
    The structure is already in the chat.
    Don't need to repeat the structure.
    Now you have to describe each file and folder to the user.
    Don't need to show the code. Just describe the file and folder.
    Finish telling the user to click on the "Create" button if want to create the files and folders.`},getPlanningAgents:async()=>{let e=await fetch("https://api.codegpt.co/api/v1/agents/marketplace?select=id,name,description,image,welcome,slug,tags",{next:{revalidate:3600}}),t=(await e.json()).filter(e=>!e.tags?.includes("llm")).map(e=>({id:e.id,name:e.name,description:e.description}));return`
    ${JSON.stringify(t,null,2)}
    
    Now you have to list the steps to solve the user's problem (using executePlanningSteps function).
    It can be any number of steps.
    Don't need to repeat the steps to the user.
    
    Example:
    planningSteps: [
      {
        step: 'Generate the SQL connection and query',
        agentName: 'SQL Expert'
        agentId: '6ac6bec1-6eff-48f1-aabc-f5c0310ebf7e'
      },
      {
        step: 'Generate the react frontend',
        agentName: 'React Expert',
        agentId: 'c407d42d-595f-4148-87af-8d02de8fc7b9'
      },
      {
        step: 'Generate the payment gateway',
        agentName: 'Paypal API',
        agentId: 'ec1be541-a758-416a-baa0-1b48f1da862b'
      }
    ]
    
    instructions(string): 
    1. **Generate the SQL connection and query**:
       - Establish a connection to the SQL database.
       - Write and execute the necessary SQL queries to retrieve the required data.
    
    2. **Generate the react frontend**:
       - Set up the React project structure.
       - Create the necessary components and integrate them with the backend.
    
    3. **Generate the payment gateway**:
       - Integrate the Paypal API into the project.
       - Ensure secure handling of payment transactions and proper error handling.
    `},executePlanningSteps:async({functionCall:e,sendChunk:t})=>{let{planningSteps:n,instructions:a}=JSON.parse(e.arguments),o=await fetch("https://api.codegpt.co/api/v1/agents/marketplace?select=id,name,description,image,welcome,slug,tags",{next:{revalidate:3600}}),r=(await o.json()).filter(e=>n.some(t=>t.agentId===e.id)),i=n.map(e=>{let t=r.find(t=>t.id===e.agentId);return{...e,image:t?.image}});return console.log({updatedPlanningSteps:i,instructions:a}),t({content:`Steps: ${JSON.stringify(i,null,2)}
      Instructions: ${a}`,display:"PlanningCard",props:{planningSteps:i}}),!1}};a()}catch(e){a(e)}})},315:(e,t,n)=>{n.a(e,async(e,a)=>{try{n.d(t,{Dz:()=>i,VL:()=>s,e_:()=>c});var o=n(92810),r=e([o]);o=(r.then?(await r)():r)[0];let i=async({messages:e,fromMarketplace:t,provider:n})=>{let a=await (0,o.getMemory)(n);return t?e:e.slice(-a)},s=e=>{let t=new Map,n=1;return e.map(e=>{let a=function(e){return"string"!=typeof e?e:e.replace(/(!\[image]\((data:image\/[a-zA-Z]+;base64,[^)]+)\)|\S{128,})/g,(e,a)=>{if(!a)return e.replace(/(.{256})/g,"$1<wbr>");{let a=`#img-representation-${n++}`;return t.set(a,e),a}})}(e?.content||"");return{role:e.role,content:a}})},c=e=>e.map(e=>({role:e?.role,content:e?.content||""}));a()}catch(e){a(e)}})},34659:(e,t,n)=>{n.d(t,{j:()=>a});function a(e,t,n="",a=15,o=!0){let r={},i=n.replace(/^\/+|\/+$/g,""),s=e;if(i&&(s=e.filter(e=>{let t=e.replace(/^\/+|\/+$/g,"");return t===i||t.startsWith(i+"/")})),0===s.length){let t=[...new Set(e.map(e=>e.split("/").slice(0,-1).join("/")).filter(e=>""!==e))],a=new Set;if(t.forEach(e=>{let t=e.split("/"),n="";for(let e of t)(n+=(n?"/":"")+e).startsWith(i)&&n!==i&&a.add(n)}),0===a.size)return`No valid subpaths found for "${n}".`;let o=Array.from(a).sort();return`No exact match found for "${n}". Did you mean one of these?
${o.join("\n")}`}for(let e of s){let t=e.split("/"),n=r;for(let e=0;e<t.length;e++){let a=t[e];e===t.length-1?n[a]=null:(n[a]||(n[a]={}),n=n[a])}}return function e(n,r="",i=!0,s=0){let c="",l=Object.entries(n),d=0;return l.forEach(([n,u],p)=>{if(d>a)return;d+=o?3*s/2*1:1;let g=p===l.length-1,m=r+(i?"    ":"│   ");c+=`${r}${g||d>a?"└── ":"├── "}${d<=a?n:"..."}
`,null!==u&&(s<t?c+=e(u,m,g,s+1):c+=`${m}└── ...
`)}),c}(r,"",!0,0)}},76129:(e,t,n)=>{n.d(t,{u:()=>r});let a=!1,o={english:{explain:"Act as an experienced programming mentor. Analyze and explain the following code clearly and concisely, highlighting its main purpose, functionality, and key concepts used.",comment:"Act as a senior developer. Add concise and descriptive comments to each relevant section of the following code, explaining the purpose of each line or block where necessary. Keep comments brief and helpful.",fix:"Act as a senior software developer. Review and fix any issues in the following code. Provide only the corrected code and a brief list of changes. If no fixes are needed, respond with: 'No issues found to fix.'",document:"Act as an expert developer. Add standard code documentation (using the language's conventional format like docstrings, JSDoc, etc.) to the following code. Provide only the documented version of the code without additional explanations or markdown reports.",refactor:"Act as a senior software architect. Analyze and improve the following code by applying SOLID principles, design patterns, and best practices. Maintain the original functionality while optimizing its structure, readability, and maintainability.",unitTest:"Act as a software testing specialist. Create comprehensive unit tests for the following code, covering positive, negative, and edge cases. Use testing best practices and the language's standard testing framework.",debug:"Act as a debugging expert. Analyze the following code to identify and resolve any bugs or issues. Provide only the corrected code and a brief explanation of the debugging process."},spanish:{explain:"Act\xfaa como un mentor experimentado en programaci\xf3n. Analiza y explica el siguiente c\xf3digo de manera clara y concisa, destacando su prop\xf3sito principal, funcionalidad y los conceptos clave utilizados.",comment:"Act\xfaa como un desarrollador s\xe9nior. Agrega comentarios concisos y descriptivos a cada secci\xf3n relevante del siguiente c\xf3digo, explicando el prop\xf3sito de cada l\xednea o bloque donde sea necesario. Mant\xe9n los comentarios breves y \xfatiles.",fix:"Act\xfaa como un desarrollador s\xe9nior de software. Revisa y corrige cualquier problema en el siguiente c\xf3digo. Proporciona solo el c\xf3digo corregido y una breve lista de cambios. Si no se necesitan correcciones, responde con: 'No se encontraron problemas para corregir.'",document:"Act\xfaa como un desarrollador experto. Agrega documentaci\xf3n est\xe1ndar al c\xf3digo (usando el formato convencional del lenguaje como docstrings, JSDoc, etc.) al siguiente c\xf3digo. Proporciona solo la versi\xf3n documentada del c\xf3digo sin explicaciones adicionales o informes en markdown.",refactor:"Act\xfaa como un arquitecto de software s\xe9nior. Analiza y mejora el siguiente c\xf3digo aplicando los principios SOLID, patrones de dise\xf1o y mejores pr\xe1cticas. Mant\xe9n la funcionalidad original optimizando su estructura, legibilidad y mantenibilidad.",unitTest:"Act\xfaa como un especialista en pruebas de software. Crea pruebas unitarias completas para el siguiente c\xf3digo, cubriendo casos positivos, negativos y l\xedmites. Usa las mejores pr\xe1cticas de pruebas y el marco de pruebas est\xe1ndar del lenguaje.",debug:"Act\xfaa como un experto en depuraci\xf3n. Analiza el siguiente c\xf3digo para identificar y resolver cualquier error o problema. Proporciona solo el c\xf3digo corregido y una breve explicaci\xf3n del proceso de depuraci\xf3n."},portuguese:{explain:"Atue como um mentor experiente em programa\xe7\xe3o. Analise e explique o c\xf3digo a seguir de forma clara e concisa, destacando seu principal prop\xf3sito, funcionalidade e conceitos-chave utilizados.",comment:"Atue como um desenvolvedor s\xeanior. Adicione coment\xe1rios concisos e descritivos em cada se\xe7\xe3o relevante do c\xf3digo a seguir, explicando o prop\xf3sito de cada linha ou bloco onde necess\xe1rio. Mantenha os coment\xe1rios breves e \xfateis.",fix:"Atue como um desenvolvedor s\xeanior de software. Revise e corrija quaisquer problemas no c\xf3digo a seguir. Forne\xe7a apenas o c\xf3digo corrigido e uma breve lista de mudan\xe7as. Se n\xe3o houver corre\xe7\xf5es necess\xe1rias, responda com: 'Nenhum problema encontrado para corrigir.'",document:"Atue como um desenvolvedor especialista. Adicione documenta\xe7\xe3o padr\xe3o ao c\xf3digo (usando o formato convencional da linguagem, como docstrings, JSDoc, etc.) no c\xf3digo a seguir. Forne\xe7a apenas a vers\xe3o documentada do c\xf3digo, sem explica\xe7\xf5es adicionais ou relat\xf3rios em markdown.",refactor:"Atue como um arquiteto de software s\xeanior. Analise e melhore o c\xf3digo a seguir aplicando os princ\xedpios SOLID, padr\xf5es de design e melhores pr\xe1ticas. Mantenha a funcionalidade original enquanto otimiza sua estrutura, legibilidade e manutenibilidade.",unitTest:"Atue como um especialista em testes de software. Crie testes unit\xe1rios abrangentes para o c\xf3digo a seguir, cobrindo casos positivos, negativos e de borda. Use as melhores pr\xe1ticas de teste e o framework de teste padr\xe3o da linguagem.",debug:"Atue como um especialista em depura\xe7\xe3o. Analise o c\xf3digo a seguir para identificar e resolver quaisquer bugs ou problemas. Forne\xe7a apenas o c\xf3digo corrigido e uma breve explica\xe7\xe3o do processo de depura\xe7\xe3o."}},r=async({promptType:e,language:t})=>{if(!a){a=!0;try{let e=await fetch("https://storage.codegpt.co/vscode/prompts.json");e.ok&&(o=await e.json())}catch{}}return o?.[t.toLowerCase()]?.[e]??o?.english?.[e]}},68721:(e,t,n)=>{n.d(t,{I:()=>s,K:()=>i});var a=n(29712),o=n(18268);let r=()=>{let e=["Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36","Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36"],t=Math.floor(Math.random()*e.length);return e[t]},i=async e=>{let t=encodeURI(e);console.log(t);let n=r(),o={"User-Agent":`${n}`},i=`https://api.stackexchange.com/2.3/search/advanced?order=desc&sort=activity&q=${t}&site=stackoverflow`;return(await (0,a.Z)(i,{headers:o}).then(function({data:e}){let t=[],n=e.items;for(let e=0;e<n.length;e++)t.push({label:n[e].title,detail:n[e].tags.join(", "),link:"https://stackoverflow.com/questions/"+n[e].question_id});return t})).slice(0,5)},s=async e=>{let t;let n=r(),i={"User-Agent":`${n}`};return await (0,a.Z)(e,{headers:i}).then(e=>{let n=e.data,a=o.zD(n),r=a(".fs-headline1").text();console.log(t={title:r,post:a(".question .post-layout .js-post-body").text(),answer:a("#answers .answer").first().find(".js-post-body").text(),score:a("#answers .answer").first().attr("data-score")})}),t}},89874:(e,t,n)=>{n.a(e,async(e,a)=>{try{n.d(t,{B$:()=>s,VU:()=>d,Yo:()=>u,dr:()=>m,lg:()=>c,pj:()=>l,q_:()=>p});var o=n(56342),r=n(52844),i=e([o,r]);function s(e,t){return new ReadableStream({async start(n){let a=e.getReader();async function o(){let{done:e,value:r}=await a.read();if(e){n.close();return}await new Promise(e=>setTimeout(e,t)),n.enqueue(r),await o()}await o()}})}function c(e){let t=e.body?.getReader();if(!t)throw Error("Response body is not readable");let n=new TextDecoder,a="";return new ReadableStream({async pull(e){for(;;){let{done:o,value:r}=await t.read();if(o){e.close();break}for(let t of n.decode(r,{stream:!0}).split("")){a+=t;try{if(a.endsWith("\n\n")){let t=a.split("data: ")[1].trim(),n=JSON.parse(t);a="",e.enqueue(n)}}catch(t){if(t.message.includes("[DONE]")){e.close();break}}}}},cancel(){t.releaseLock()}})}[o,r]=i.then?(await i)():i;let l=e=>!(2===Object.keys(e).length&&!e.content&&"assistant"===e.role),d=async(e,t)=>{let n=new ReadableStream({start(t){let n=new TextEncoder;for(let a of e){let e;e="string"==typeof a?n.encode(a):a instanceof ArrayBuffer?new Uint8Array(a):a,t.enqueue(e)}t.close()}});return new ReadableStream({async start(e){let a=n.getReader();for(;;){let{done:t,value:n}=await a.read();if(t)break;e.enqueue(n)}a.releaseLock();let o=t.getReader();for(;;){let{done:t,value:n}=await o.read();if(t)break;e.enqueue(n)}o.releaseLock(),e.close()}})},u=async(e,t)=>{let n=e.split(" ");return new ReadableStream({async start(e){let a=n.join("");for(let a of(t?.onStart?.(),n)){let n=new TextEncoder().encode(a+" ");e.enqueue(n),t?.onToken?.(a),await new Promise(e=>setTimeout(e,Math.floor(40*Math.random())+10))}t?.onFinal?.(a),t?.onCompletion?.(a),e.close()}})},p=(e,t,n)=>new ReadableStream({async start(a){await g(e,a,t,n),a.close()}}),g=async(e,t,n,a)=>{let i=e.getReader(),s={name:"",arguments:""},l=!0,d="";for(;;){let{done:e,value:u}=await i.read();if(e)break;try{let e=u?.choices?.[0]?.delta?.content;e&&(d+=e,t.enqueue(e));let i=u?.choices?.[0]?.delta?.function_call;if(i){if(l){l=!1;let e=`<p class="text-sm text-default-500 flex items-center gap-1">Searching on Stack Overflow...</p>

`;t.enqueue(e)}s.name+=i.name?`${i.name}`:"";let e=i?.arguments?i?.arguments:"";s.arguments+=e,console.log({function_call:i})}let p=u?.choices?.[0]?.finish_reason;if("function_call"===p){let e;console.log({functionCall:s});try{e=await r.wk[s.name]({functionCall:s,sendChunk:t.enqueue,roundTripStream:n})}catch(e){console.log(e)}if(!1===e)return;(0,o.sendEvent)({eventName:"functionCall",functionName:s.name,provider:"CodeGPT Plus Beta"}),e&&""!==s.name||(e="function name is invalid or empty, try again with a valid function name.");let i=[...a,{role:"assistant",content:d||"",function_call:{name:s.name,arguments:JSON.stringify(s.arguments)}},{role:"function",name:s.name,content:e}];console.log(JSON.stringify(i,null,2)),d||t.enqueue("\n");let l=await n({messages:i});return l.ok||console.log({status:l.status,text:await l.text()}),g(c(l),t,n,i)}}catch(e){}}i.releaseLock(),t.close()},m=(e,t,n,a,o)=>h(e,a,t,n).then(()=>{o()}),h=async(e,t,n,a)=>{let i=e.getReader(),s=[],d="",u=crypto.randomUUID(),p=[],g=[];for(;;){let{done:e,value:m}=await i.read(),f=m?.metadata?.chunks,y=m?.metadata?.relationships,w=m?.metadata?.nodesFound;if(y||f||w){y&&(p=[...p,...y]),f&&(g=[...g,...f]),w&&w.forEach(e=>{p.push({source:e.id,sourceType:e.type,sourceLabel:e.label,target:e.id,targetType:e.type,targetLabel:e.label})});let e=p.filter((e,t,n)=>t===n.findIndex(t=>t.source===e.source&&t.target===e.target)),n=g.filter((e,t,n)=>t===n.findIndex(t=>t.similarity===e.similarity));t({content:"",display:"ChunksCard",props:{graph:e,chunks:n},id:u})}if(e)break;try{let e=m?.choices?.[0]?.delta?.content;e&&(d+=e,t({content:e,display:"fragment"}));let i=m?.choices?.[0]?.delta?.tool_calls;i&&i.forEach(e=>{let t=e.index||0;s[t]||(s[t]={name:"",arguments:"",id:""}),s[t].name+=e?.function?.name||"",s[t].arguments+=e?.function?.arguments||"",s[t].id+=e?.id||""});let u=m?.choices?.[0]?.finish_reason;if("tool_calls"===u||"stop"===u&&s.length>0){s=s.filter(e=>e.name);let e=await Promise.all(s.map(async e=>{console.log({toolCall:e});try{return{result:await r.wk[e.name]({functionCall:e,sendChunk:t,roundTripStream:n}),toolCall:e}}catch(n){let t=e.name in Object.keys(r.wk)?`Error: ${n}`:`Error: ${e.name} is not a valid function`;return console.error(`Error executing ${e.name}:`,t),{result:t,toolCall:e}}}));if(e.every(({result:e})=>!1===e))break;e.filter(({result:e})=>!1!==e).forEach(({toolCall:e})=>{(0,o.sendEvent)({eventName:"functionCall",functionName:e.name,provider:"CodeGPT Plus Beta"})});let i=[...a,{role:"assistant",content:d,tool_calls:s.filter(e=>e.id).map(e=>({id:e.id,type:"function",function:{name:e.name,arguments:e.arguments}}))},...e.filter(({result:e})=>!1!==e).map(({result:e,toolCall:t})=>({role:"tool",tool_call_id:t.id,content:e}))].filter(l),u=await n({messages:i});return await h(c(u),t,n,i)}if("content_filter"===u){t({content:"content_filtered",display:"fragment"});break}}catch(e){console.log({e,json:m})}}i.releaseLock()};a()}catch(e){a(e)}})}};